import { Firestore, collectionData, collection, doc, setDoc, getDoc, getDocs, updateDoc, query, where, Query, addDoc } from '@angular/fire/firestore';
import { concatMap, filter, map, tap } from 'rxjs/operators';
import { environment } from '../../../../environments/environment';
import { FireAuthRepository } from './fireauth.repo';
import { Injectable } from '@angular/core';
import { Observable, from, of } from 'rxjs';

/**
 * Collection and Docuemnts Architecture
 */
export const PURCHASED_USERS_COL = 'purchased_users';

export const USERS_COL = 'users';
export const USER_SOCIAL_MEDIA_HANDLES_DOC = 'social_media_handles';
export const USER_OAUTH_2_KEYS_DOC = 'oAuth2Keys';

export const PostingPlatform = {
  FACEBOOK: 'facebook',
  INSTAGRAM: 'instagram',
  TWITTER: 'twitter',
  YOUTUBE: 'youtube',
  MEDIUM: 'medium',
  TIKTOK: 'tiktok',
  LINKEDIN: 'linkedin'
}

/**
 * Accounts and Oauth 2.0
 */
export const ACCESS_TOKEN = 'access_token';
export const LAST_LOGIN_AT = 'last_login_at';
export const CREATION_TIME = 'creation_time';
export const REFRESH_TOKEN = 'refresh_token';
export const SCOPE = 'scopes';

@Injectable({
  providedIn: 'root',
})
export class FirestoreRepository {

  constructor(
    private firestore: Firestore,
    private fireAuth: FireAuthRepository
  ) {}

  // Create a single data object under a user ID
  async createUserDocument<T>(
    collectionPath: string,
    data: T,
    userId: string = this.fireAuth.sessionUser?.uid || ''
  ): Promise<T> {
    const usersRef =  collection(this.firestore, collectionPath);
    const userDocRef = doc(usersRef, userId);
    // const userDocsCollectionRef = collection(userRef, );
    // const userDocsRef = doc(userDocsCollectionRef);

    // The initial creation of our object and the update of the ID
    setDoc(userDocRef, this.sanitizeObject(data));
    data = this.update(data, 'id', userDocRef.id);
    await this.updateUsersCollectionDocument<T>(
      collectionPath,
      userDocRef.id,
      data
    );
    
    if (!environment.production) {
      console.groupCollapsed(
        `‚ù§Ô∏è‚Äçüî• Firestore Service [${userDocRef.path}] [createUserDocument]`
      );
      console.log(`‚ù§Ô∏è‚Äçüî• [${userId}]`, data);
      console.groupEnd();
    }
    return data;
  }

  private update(item: any, key: any, value: any): any {
    item[key] = value;
    return item;
  }

  async createUsersCollection(
    collectionPath: string,
    userId: string = this.fireAuth.sessionUser?.uid || ''
  ): Promise<void> {
    const userCollectionRef = collection(this.firestore, USERS_COL, userId, collectionPath);
    const newDocRef = doc(userCollectionRef); // Creates a new document reference with an autogenerated ID
    return setDoc(newDocRef, {}); // Set an empty object to the document
  }

  getUsersDocument<T>(
    collectionPath: string,
    documentKey: string,
    userId: string = this.fireAuth.sessionUser?.uid || ''
  ): Observable<T> {
    if (userId === '') {
      return this.fireAuth.getUserAuthObservable().pipe(
        concatMap((user) => {
          return this.getFocusedUsersDoc<T>(collectionPath, documentKey, user.uid);
        })
      );
    } else {
      return this.getFocusedUsersDoc<T>(collectionPath, documentKey, userId);
    }
  }


  private getFocusedUsersDoc<T>(
    collectionPath: string,
    documentKey: string,
    userId: string
  ): Observable<T> {
    // const userCollectionRef = collection(this.firestore, USERS_COL, userId, collectionPath);
    const userCollectionRef = collection(this.firestore, collectionPath);
    const userDocRef = doc(userCollectionRef, documentKey);
    
    return from(getDoc(userDocRef)).pipe(  
      tap((data) => {
        if (!environment.production) {
          console.groupCollapsed(
            `‚ù§Ô∏è‚Äçüî• Firestore Streaming [${userDocRef.path}] [getUserDocument] [${userId}]`
          );
          console.log(data);
          console.groupEnd();
        }
      }),
      filter((data) => !!data),
      map((data) => data.data() as T)
    );
  }

  getUsersCollection<T>(
    collectionPath: string,
    userId: string = this.fireAuth.sessionUser?.uid || ''
  ): Observable<T[]> {
    if (userId === '') {
      return this.fireAuth.getUserAuthObservable().pipe(
        concatMap((user) => {
          return this.getFocusedCollectionRef<T>(collectionPath, user.uid);
        })
      );
    } else {
      return this.getFocusedCollectionRef<T>(collectionPath, userId);
    }
  }

  private getFocusedCollectionRef<T>(
    collectionPath: string,
    userId: string
  ): Observable<T[]> {
    const collectionRef = collection(this.firestore, USERS_COL, userId, collectionPath);
    // const querySnapshot = getDocs(collectionRef).
    return from(getDocs(collectionRef)).pipe(
      map((querySnapshot) => {
        const data: T[] = [];
        querySnapshot.forEach((doc) => {
          const docData = doc.data();
          data.push(docData as T);
        });
        return data;
      }),
      tap((data) => {
        if (!environment.production) {
          console.groupCollapsed(
            `‚ù§Ô∏è‚Äçüî• Firestore Streaming [${collectionRef.path}] [getUserCollection] [${userId}]`
          );
          console.log(data);
          console.groupEnd();
        }
      })
    );
  }

  /**
   * Only for creating a top level property entry
   * @param collectionPath 
   * @param documentKey 
   * @param data 
   * @param userId 
   * @returns 
   */
  async updateSpecificUserDocument<T>(
    data: Partial<T>
  ): Promise<boolean> {
    if (this.fireAuth.sessionUser == null) {
      return new Promise<boolean>((resolve, reject) => { resolve(false) });
    }
    const collectionRef = collection(this.firestore, USERS_COL);
    const usersRef = doc(collectionRef, this.fireAuth.sessionUser.uid);
    
    return new Promise<boolean>((resolve, reject) => {
      updateDoc(usersRef, this.sanitizeObject(data))
        .then(() => {
          if (!environment.production) {
            console.groupCollapsed(
              `‚ù§Ô∏è‚Äçüî• Firestore Service [${usersRef.path}] [updateUserDocument]`
            );
            console.log(`‚ù§Ô∏è‚Äçüî• [${ usersRef.path }]`, data);
            console.groupEnd();
          }
          resolve(true); // Resolving the Promise with a boolean value indicating success
        })
        .catch((error: any) => {
          console.error('‚ù§Ô∏è‚Äçüî• Request failed', error);
          resolve(false); // Resolving the Promise with a boolean value indicating failure
        });
    });
  }

  /**
   * Patch specific properties and objects as children of the single data object.
   * Keeping as a promise for internal use only
   * @param collectionPath 
   * @param documentKey 
   * @param data 
   * @param userId 
   * @returns 
   */
  async updateUsersCollectionDocument<T>(
    collectionPath: string,
    documentKey: string,
    data: Partial<T>
  ): Promise<boolean> {
    if (this.fireAuth.sessionUser == null) {
      return new Promise<boolean>((resolve, reject) => { reject(false) });
    }
    const collectionRef = collection(this.firestore, USERS_COL, this.fireAuth.sessionUser.uid, collectionPath);
    const userDocRef = doc(collectionRef, documentKey);
    
    return new Promise<boolean>((resolve, reject) => {
      updateDoc(userDocRef, this.sanitizeObject(data))
        .then(() => {
          if (!environment.production) {
            console.groupCollapsed(
              `‚ù§Ô∏è‚Äçüî• Firestore Service [${userDocRef.path}] [updateUserDocument]`
            );
            console.log(`‚ù§Ô∏è‚Äçüî• [${documentKey}]`, data);
            console.groupEnd();
          }
          resolve(true); // Resolving the Promise with a boolean value indicating success
        })
        .catch((error: any) => {
          console.error('‚ù§Ô∏è‚Äçüî• Request failed', error);
          resolve(false); // Resolving the Promise with a boolean value indicating failure
        });
    });
  }

  // async updateUsersDocumentMap(
  //   collectionPath: string,
  //   documentKey: string,
  //   data: Map<string, string>,
  //   userId: string = this.fireAuth.sessionUser?.uid || ''
  // ): Promise<void> {
  //   const docRef = this.firestore
  //     .collection(USERS_COL)
  //     .doc(userId)
  //     .collection(collectionPath)
  //     .doc(documentKey);
  //   const objMap = Object.fromEntries(data);
  //   await docRef.update(this.sanitizeObject({ structuredScript: objMap }));

  //   if (!environment.production) {
  //     console.groupCollapsed(
  //       `‚ù§Ô∏è‚Äçüî• Firestore Service [${collectionPath}] [updateUserDocument]`
  //     );
  //     console.log(`‚ù§Ô∏è‚Äçüî• [${userId}]`, data);
  //     console.groupEnd();
  //   }
  // }

  // Observes a single Firestore document
  observeSpecificDocument<T>(
    collectionName: string,
    documentId: string
  ): Observable<T> {
    const collectionRef = collection(this.firestore, collectionName);
    const documentRef = doc(collectionRef, documentId);

    return from(getDoc(documentRef)).pipe(
      map((data) => {
        const docData = data.data()  as T;
        const id = data.id;
        return { id, ...docData };
      })
    );
  }

  // Observe a collection of documents
  observeSpecificCollection<T>(
    collectionPath: string,
    queryFn: Query
  ): Observable<T[]> {
    const collectionRef = collection(this.firestore, collectionPath);
    const querySnapshot = getDocs(queryFn);

    return from(querySnapshot).pipe(
      map((querySnapshot) => {
        const data: T[] = [];
        querySnapshot.forEach((doc) => {
          const docData = doc.data();
          data.push(docData as T);
        });
        return data;
      }),
        tap((data) => {
          if (!environment.production) {
            console.groupCollapsed(
              `‚ù§Ô∏è‚Äçüî• Firestore Streaming [${collectionPath}] [observeCollection]`
            );
            console.table(data);
            console.groupEnd();
          }
        })
      );
  }

  // Creates a new Firestore document using the full path
  createSpecificDocument<T>(collectionName: string, data: T): Promise<boolean> {
    const collectionRef = collection(this.firestore, collectionName);
    const documentRef = addDoc(collectionRef, this.sanitizeObject(data));

    return new Promise<boolean>((resolve, reject) => {
      documentRef.then(() => {
          if (!environment.production) {
            console.groupCollapsed(
              `‚ù§Ô∏è‚Äçüî• Firestore Service [${collectionRef.path}] [updateUserDocument]`
            );
            console.groupEnd();
          }
          resolve(true); // Resolving the Promise with a boolean value indicating success
        })
        .catch((error: any) => {
          console.error('‚ù§Ô∏è‚Äçüî• Request failed', error);
          resolve(false); // Resolving the Promise with a boolean value indicating failure
        });
    });
  }

  // Updates a Firestore document
  updateSpecificDocument<T>(
    collectionName: string,
    documentId: string,
    data: Partial<T>
  ): Promise<void> {
    const collectionRef = collection(this.firestore, collectionName);
    const documentRef = doc(collectionRef, documentId);
    
    return setDoc(documentRef, this.sanitizeObject(data));
  }

  // Helper function to sanitize the object and remove undefined values
  private sanitizeObject(obj: any): any {
    const sanitizedObj: any = {};
    for (const [key, value] of Object.entries(obj)) {
      if (typeof value !== 'undefined') {
        sanitizedObj[key] = value;
      }
    }
    return sanitizedObj;
  }
}
